import aiofiles
import os
import json
import re
import logging
import sys
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import asyncio
from os import getenv
from html import escape

API_TOKEN = getenv("BOT_TOKEN")  


dp = Dispatcher()

DEFAULT_LOGS = """2024-10-30T13:20:33+03:00 [INFO] User logged in
2024-10-30T13:20:33+03:00 [DEBUG] Invalid input received
2024-10-30T13:20:33+03:00 [ERROR] User logged out
2024-10-30T13:20:33+03:00 [INFO] User logged in
2024-10-30T13:20:33+03:00 [ERROR] Error processing request
2024-10-30T13:20:34+03:00 [INFO] File uploaded
2024-10-30T13:20:34+03:00 [DEBUG] User logged out
2024-10-30T13:20:34+03:00 [DEBUG] Database connection established
2024-10-30T13:20:34+03:00 [INFO] Database connection established
2024-10-30T13:20:34+03:00 [ERROR] File uploaded
2024-10-30T13:20:34+03:00 [INFO] User logged in
2024-10-30T13:20:34+03:00 [ERROR] Invalid input received
2024-10-30T13:20:34+03:00 [INFO] Invalid input received
2024-10-30T13:20:34+03:00 [DEBUG] File uploaded
"""

DEFAULT_PATTERNS = {
    "log_patterns": [
        "ERROR.*",
        "INFO.*"
    ]
}

@dp.message(Command("start"))
async def start(message: Message) -> None:
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:")
    await show_option_buttons(message)

async def show_option_buttons(message: Message) -> None:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ üìä", callback_data='check_logs')],
        [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏ üì•", callback_data='upload_log')],
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ üìÑ", callback_data='show_logs')],
        [InlineKeyboardButton(text="–ü–æ–∫–∞–∑–∞—Ç—å —à–∞–±–ª–æ–Ω—ã üìÉ", callback_data='show_patterns')],
        [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω—ã üîÑ", callback_data='upload_patterns')],
        [InlineKeyboardButton(text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–æ–≥–∏ –∏ —à–∞–±–ª–æ–Ω—ã ‚öôÔ∏è", callback_data='load_defaults')],
    ])
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:', reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == 'delete_pattern')
async def prompt_for_delete_pattern(callback_query: CallbackQuery) -> None:
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —à–∞–±–ª–æ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")


@dp.message(lambda message: message.text and not message.reply_to_message)
async def delete_pattern(message: Message) -> None:
    user_id = message.from_user.id
    pattern_to_delete = message.text.strip()

    
    patterns = await read_user_config(user_id)

    if pattern_to_delete in patterns:
        patterns.remove(pattern_to_delete)  

        config_file_path = os.path.join('logs', f'config_{user_id}.json')

        
        async with aiofiles.open(config_file_path, 'w') as config_file:
            await config_file.write(json.dumps({"log_patterns": patterns}, ensure_ascii=False, indent=4))

        await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.callback_query(lambda c: c.data == 'add_pattern')
async def prompt_for_pattern(callback_query: CallbackQuery) -> None:
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —à–∞–±–ª–æ–Ω —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è:")

@dp.message(lambda message: message.text and not message.reply_to_message)
async def save_pattern(message: Message) -> None:
    user_id = message.from_user.id
    pattern = message.text.strip()

    
    try:
        re.compile(pattern)  
    except re.error:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–µ–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    config_file_path = os.path.join('logs', f'config_{user_id}.json')

    
    patterns = await read_user_config(user_id)
    patterns.append(pattern)

    
    async with aiofiles.open(config_file_path, 'w') as config_file:
        await config_file.write(json.dumps({"log_patterns": patterns}, ensure_ascii=False, indent=4))

    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")

@dp.callback_query()
async def button_selection_handler(callback_query: CallbackQuery) -> None:
    await callback_query.answer()
    if callback_query.data == 'check_logs':
        await test_logs_command(callback_query)
    elif callback_query.data == 'upload_log':
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏ (.log).")
    elif callback_query.data == 'show_logs':
        await show_logs_command(callback_query)
    elif callback_query.data == 'show_patterns':
        await show_patterns_command(callback_query)
    elif callback_query.data == 'upload_patterns':
        await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–∞–º–∏ (JSON).")
    elif callback_query.data == 'load_defaults':
        await load_default_files(callback_query)
    elif callback_query.data == 'delete_logs':
        await delete_logs_command(callback_query)
    elif callback_query.data == 'set_default_patterns':
        await set_default_patterns(callback_query)
    elif callback_query.data == 'delete_pattern':
        await prompt_for_delete_pattern(callback_query)

@dp.message(lambda message: message.document and message.document.file_name.endswith('.log'))
async def handle_document(message: Message) -> None:
    await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –ª–æ–≥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")  
    user_id = message.from_user.id
    chat_id = message.chat.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω user_id: {user_id} –∏ chat_id: {chat_id} –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {message.document.file_name}")

    file_name = f'logs_{user_id}.log'  
    file_path = os.path.join('logs', file_name)

    try:
        document = await message.bot.get_file(message.document.file_id)
        await message.bot.download_file(document.file_path, file_path)

        if os.path.exists(file_path):
            await message.answer("‚úÖ –õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
            logging.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await message.answer("üö´ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@dp.message(lambda message: message.document and message.document.file_name.endswith('.json'))
async def handle_patterns_upload(message: Message) -> None:
    user_id = message.from_user.id
    file_name = f'config_{user_id}.json'  
    file_path = os.path.join('logs', file_name)

    try:
        document = await message.bot.get_file(message.document.file_id)
        await message.bot.download_file(document.file_path, file_path)

        if os.path.exists(file_path):
            await message.answer("–®–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
            logging.info(f"–®–∞–±–ª–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ –ø—É—Ç–∏: {file_path}")
        else:
            await message.answer("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —à–∞–±–ª–æ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

async def load_default_files(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    
    log_file_path = os.path.join('logs', f'logs_{user_id}.log')
    async with aiofiles.open(log_file_path, 'w') as log_file:
        await log_file.write(DEFAULT_LOGS)

    
    config_file_path = os.path.join('logs', f'config_{user_id}.json')
    async with aiofiles.open(config_file_path, 'w') as config_file:
        await config_file.write(json.dumps(DEFAULT_PATTERNS, ensure_ascii=False, indent=4))

    await callback_query.message.answer("–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ª–æ–≥–∏ –∏ —à–∞–±–ª–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def delete_logs_command(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    log_file_path = os.path.join('logs', f'logs_{user_id}.log')

    if os.path.exists(log_file_path):
        os.remove(log_file_path)
        await callback_query.message.answer("–õ–æ–≥–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await callback_query.message.answer("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

async def set_default_patterns(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    config_file_path = os.path.join('logs', f'config_{user_id}.json')

    async with aiofiles.open(config_file_path, 'w') as config_file:
        await config_file.write(json.dumps(DEFAULT_PATTERNS, ensure_ascii=False, indent=4))

    await callback_query.message.answer("–®–∞–±–ª–æ–Ω—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def test_logs_command(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    log_file_path = os.path.join('logs', f'logs_{user_id}.log')
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {log_file_path}")

    if os.path.exists(log_file_path):
        logging.info(f"–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {log_file_path}")
        logs = await read_log_file(log_file_path)
        patterns = await read_user_config(user_id)
        filtered_logs = await filter_logs(logs, patterns)

        if filtered_logs:
            max_length = 4096
            for i in range(0, len(filtered_logs), max_length):
                await callback_query.message.answer(filtered_logs[i:i + max_length])
        else:
            await callback_query.message.answer("–ù–µ—Ç –ª–æ–≥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–Ω—ã–º —à–∞–±–ª–æ–Ω–∞–º.")
    else:
        await callback_query.message.answer("–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def show_logs_command(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    log_file_path = os.path.join('logs', f'logs_{user_id}.log')

    if os.path.exists(log_file_path):
        logs = await read_log_file(log_file_path)
        if logs:
            await send_long_message(callback_query.message, "üìÑ –í–æ—Ç –≤–∞—à–∏ –ª–æ–≥–∏:\n" + logs)
        else:
            await callback_query.message.answer("üîç –õ–æ–≥ —Ñ–∞–π–ª –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–∏ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –Ω–∞–ª–∏—á–∏–µ.")
    else:
        await callback_query.message.answer("‚ùå –õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –ª–æ–≥–∏ –ø–µ—Ä–µ–¥ –∞–Ω–∞–ª–∏–∑–æ–º.")

async def send_long_message(message, text, max_length=4096):
    for i in range(0, len(text), max_length):
        await message.answer("<pre>" + escape(text[i:i + max_length]) + "</pre>", parse_mode=ParseMode.HTML)

async def show_patterns_command(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    patterns = await read_user_config(user_id)

    if patterns:
        max_length = 4096
        patterns_message = "–í–∞—à–∏ —à–∞–±–ª–æ–Ω—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π:\n" + "\n".join(patterns)
        for i in range(0, len(patterns_message), max_length):
            await callback_query.message.answer(patterns_message[i:i + max_length])
    else:
        await callback_query.message.answer("–®–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –∏—Ö.")


async def read_log_file(log_file_path: str) -> str:
    try:
        async with aiofiles.open(log_file_path, 'r') as log_file:
            content = await log_file.read()
        return content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥ —Ñ–∞–π–ª–∞: {e}")
        return ""

async def read_user_config(user_id: int) -> list:
    config_file_path = os.path.join('logs', f'config_{user_id}.json')  
    if os.path.exists(config_file_path):
        async with aiofiles.open(config_file_path, 'r') as config_file:
            config_data = await config_file.read()
        config = json.loads(config_data)
        return config.get('log_patterns', [])
    else:
        return []  

async def filter_logs(logs: str, patterns: list) -> str:
    filtered_logs = []
    for line in logs.splitlines():
        for pattern in patterns:
            if re.search(pattern, line):
                filtered_logs.append(line)
                break
    return '\n'.join(filtered_logs)

async def main() -> None:
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    
    os.makedirs('logs', exist_ok=True)

    
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
